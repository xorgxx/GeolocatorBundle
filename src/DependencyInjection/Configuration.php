<?php

namespace GeolocatorBundle\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;
use Symfony\Component\Config\Definition\Builder\NodeDefinition;

class Configuration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder('geolocator');
        $rootNode = $treeBuilder->getRootNode();

        $rootNode
            ->children()
                ->booleanNode('enabled')->defaultTrue()->end()
                ->scalarNode('event_bridge_service')->defaultNull()->end()
                        ->booleanNode('auto_detect_services')->defaultTrue()->end()
                        ->booleanNode('messenger_enabled')->defaultValue('%geolocator.messenger_available%')->end()
                        ->booleanNode('rabbit_enabled')->defaultValue('%geolocator.rabbit_available%')->end()
                        ->booleanNode('redis_messenger_enabled')->defaultValue('%geolocator.redis_messenger_available%')->end()
                        ->booleanNode('mercure_enabled')->defaultValue('%geolocator.mercure_available%')->end()

                ->arrayNode('ip_filter_flags')
                    ->scalarPrototype()->end()
                    ->defaultValue(['X-Forwarded-For', 'X-Forwarded-Host', 'X-Forwarded-Proto'])
                ->end()
                ->arrayNode('admin')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')->defaultFalse()->end()
                        ->scalarNode('route_prefix')->defaultValue('/admin/geolocator')->end()
                    ->end()
                ->end()
                ->arrayNode('trusted_proxies')
                    ->prototype('scalar')->end()
                    ->defaultValue([])
                    ->info('Liste des adresses IP ou CIDR des proxies de confiance')
                ->end()

                ->arrayNode('providers')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->scalarNode('default')
                            ->defaultValue('ipapi')
                            ->info('Fournisseur de géolocalisation par défaut')
                        ->end()
                        ->arrayNode('list')
                            ->useAttributeAsKey('name')
                            ->arrayPrototype()
                                ->children()
                                    ->scalarNode('dsn')
                                        ->isRequired()
                                        ->info('URL du service de géolocalisation avec {ip} comme placeholder')
                                    ->end()
                                    ->scalarNode('apikey')
                                        ->defaultNull()
                                        ->info('Clé API pour ce fournisseur')
                                    ->end()
                                    ->integerNode('timeout')
                                        ->defaultValue(5)
                                        ->info('Timeout en secondes pour les requêtes API')
                                        ->min(1)
                                        ->max(30)
                                    ->end()
                                    ->integerNode('retry_attempts')
                                        ->defaultValue(2)
                                        ->info('Nombre de tentatives en cas d\'échec')
                                        ->min(0)
                                        ->max(5)
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('fallback')
                            ->scalarPrototype()->end()
                            ->defaultValue(['ipwhois', 'ipapi'])
                            ->info('Liste des fournisseurs alternatifs en cas d\'échec du fournisseur principal')
                        ->end()
                    ->end()
                ->end()

                ->arrayNode('storage')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->enumNode('type')
                            ->values(['memory', 'json', 'redis'])
                            ->defaultValue('json')
                            ->info('Type de stockage pour les bans: memory (non persistant), json (fichier) ou redis')
                        ->end()
                        ->scalarNode('file')
                            ->defaultValue('%kernel.project_dir%/var/bans.json')
                            ->info('Chemin du fichier JSON pour le stockage de type "json"')
                            ->validate()
                                ->ifTrue(function ($v) { return !is_string($v); })
                                ->thenInvalid('Le chemin du fichier doit être une chaîne de caractères')
                            ->end()
                        ->end()
                        ->scalarNode('redis_dsn')
                            ->defaultValue('redis://localhost')
                            ->info('DSN Redis pour le stockage de type "redis"')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('ip_filters')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')->defaultTrue()->end()
                        ->booleanNode('allow_list_exclusive')->defaultFalse()->end()
                        ->arrayNode('allow_list')
                            ->scalarPrototype()->end()
                        ->end()
                        ->arrayNode('block_list')
                            ->scalarPrototype()->end()
                        ->end()
                    ->end()
                ->end()

                ->arrayNode('bans')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->integerNode('max_attempts')->defaultValue(10)->end()
                        ->integerNode('ttl')->defaultValue(3600)->end()
                        ->scalarNode('ban_duration')->defaultValue('1 hour')->end()
                        ->arrayNode('permanent_countries')
                            ->scalarPrototype()->end()
                            ->defaultValue(['RU', 'CN'])
                        ->end()
                    ->end()
                ->end()

                ->arrayNode('country_filters')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->arrayNode('allow')
                            ->scalarPrototype()->end()
                            ->defaultValue(['FR', 'BE'])
                        ->end()
                        ->arrayNode('block')
                            ->scalarPrototype()->end()
                            ->defaultValue(['RU', 'CN'])
                        ->end()
                    ->end()
                ->end()

                ->arrayNode('vpn_detection')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')->defaultTrue()->end()
                        ->scalarNode('provider')->defaultValue('ipqualityscore')->end()
                        ->arrayNode('allowed_ips')
                            ->scalarPrototype()->end()
                            ->defaultValue([])
                        ->end()
                    ->end()
                ->end()

                ->arrayNode('crawler_filter')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')->defaultTrue()->end()
                        ->booleanNode('allow_known')->defaultFalse()->end()
                    ->end()
                ->end()

                ->scalarNode('redirect_on_ban')->defaultValue('/banned')->end()
                ->scalarNode('log_channel')->defaultValue('geolocator')->end()
                ->scalarNode('log_level')->defaultValue('warning')->end()

                ->arrayNode('profiler')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')->defaultTrue()->end()
                    ->end()
                ->end()

                ->booleanNode('simulate')->defaultFalse()->end()

                ->arrayNode('cache')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')->defaultTrue()->end()
                        ->integerNode('ttl')
                            ->defaultValue(86400) // 24 hours
                            ->info('Durée de vie du cache en secondes')
                        ->end()
                        ->scalarNode('pool')
                            ->defaultValue('cache.app')
                            ->info('Service de cache à utiliser')
                        ->end()
                    ->end()
                ->end()

                ->arrayNode('rate_limiter')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')->defaultFalse()->end()
                        ->integerNode('limit')
                            ->defaultValue(60)
                            ->info('Nombre maximum de requêtes par période')
                        ->end()
                        ->integerNode('interval')
                            ->defaultValue(60)
                            ->info('Période en secondes')
                        ->end()
                    ->end()
                ->end()
            ->end();

        $this->addCountrySection($rootNode);

        return $treeBuilder;
            }

            private function addCountrySection(NodeDefinition $rootNode): void
            {
        $rootNode
            ->children()
                ->arrayNode('country_overrides')
                    ->useAttributeAsKey('code')
                    ->arrayPrototype()
                        ->children()
                            ->booleanNode('allow')->defaultTrue()->end()
                            ->arrayNode('ip_ranges')
                                ->scalarPrototype()->end()
                                ->info('Plages IP spécifiques à autoriser/bloquer pour ce pays')
                            ->end()
                            ->scalarNode('message')
                                ->defaultNull()
                                ->info('Message personnalisé pour le blocage de ce pays')
                            ->end()
                            ->scalarNode('redirect')
                                ->defaultNull()
                                ->info('URL de redirection spécifique pour ce pays')
                            ->end()
                        ->end()
                    ->end()
                    ->info('Configuration par pays pour des règles spécifiques')
                ->end()
            ->end();
    }
}
